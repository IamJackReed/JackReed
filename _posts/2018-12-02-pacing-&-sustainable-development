---
layout: post
title:  "Pacing & Sustainable Development"
date: 2018-12-02 13:00:00
categories:
tags:
image: /assets/article_images/2018-12-02-pacing-&-sustainable-development/sustainable.jpg
image2: /assets/article_images/2018-12-02-pacing-&-sustainable-development/sustainable-mobile.jpg
---


# Make The Right Turns
<span style="color:#00000; text-align: justify; font-family: 'open sans'; text-align: 'justify'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">The literal translation of the word agile – ‘able to move quickly and easily’, doesn’t really encompass the essence of everything that an agile team building software is about. There is a desire for business agility for sure, but I don’t think an agile team should necessarily be trying to work faster as their primary aim. What about the needs of the people, the individuals of the teams, people in the organisation, people that use the software? There will be, of course, times when being able to move easily and fast as a team will pay off. However, you need to be heading in the right direction - teams in most cases are better off going at a slower pace making the right turns, then running flat out in the wrong direction.

 '_Agile processes promote sustainable development. The sponsors, developers, and users should be to be able to maintain a constant pace indefinitely_’ – **Agile Manifesto**

span style="color:#00000; text-align: justify; font-family: 'open sans'; text-align: 'justify'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Development teams should be able to maintain a pace of working that doesn't cause any of them to become too overloaded with work, not to the point that they get stressed and burn out as a result of it anyway. Pressure can build up and the sense to do things quickly can easily appear if there aren’t processes in place promoting sustainable development. Working under high pressure for long hours will soon take its toll and can cause a team to quickly burn out. This will bring a halt to value being delivered, potentially impacting quality and innovation on the work that does get done. And not to mention the health and well-being of the individuals on the team.

#Autonomy & Slack
span style="color:#00000; text-align: justify; font-family: 'open sans'; text-align: 'justify'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Freedom within set boundaries and the flexibility to be able to change direction if necessary. This can become difficult when we strive for each team member to be 100% utilised, after all we can't possible have people just sitting around doing nothing now can we ...or can we? Some would say that there are situations where being able to just lean back in your chair, gaze out the window or up at the ceiling and daydream can be beneficial, this is probably true. Challenge arises when teams move at a pace that's not sustainable for them. If there hasn't been enough slack created, they become overloaded with work and if they then get blocked on anything and then pick up a something else to work on in the meantime, then that 'something' still remains not done and in progress. Work in progress (WIP) is a leading indicator and can help expose bottlenecks to the team, so they can do something about it while there is still time. Having graphical information relating to the progress of the Sprint visible, enables conversations to flow more easily amongst the team, allowing them to get alignment around how they may need to adjust things, in order to still meet their commitment to the Sprint goal

# Quality of Performance
span style="color:#00000; text-align: justify; font-family: 'open sans'; text-align: 'justify'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">This ties in with sustainable development. When a team are under pressure to deliver something quickly, and they fall behind, then they can be tempted to cut corners. Teams that feel that they have the heat under their feet and don't have enough time they need, when it comes to them choosing between a safe route or a more experimental route, they play it safe almost every time. This can potentially hinder innovation and can produce less than desirable results, it can be seen when a team’s Sprint length of a team is too short. Plus, there is also a good argument that maintaining a sustainable pace is a sensible approach when it comes to doing complex work, such as, software development. As mentioned it’s an important consideration for the well-being of the people on a team including the quality of their performance - in fact, there has been studies around the quality of performance that suggest that there is be a sweet spot to be found when working with complex work.

 **Yerkes–Dodson law**



<span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">_Robert Yerkes_ and _John Dillingham Dodson_, perhaps best known for describing Yerkes–Dodson law. Their study is based on observation and experience and it maps the relationship between the quality of performance of an individual, and their physiological or mental arousal. The results from the study suggests that the quality of performance increases with arousal, but only up to a point, then performance decreases as levels of arousal become too much for the individual to handle. It seems that this typically occurs when working on complex tasks, such as those found in software development. Teams should work at a pace that’s suitable for them given their abilities and context - being able to work at a sustainable pace helps ensure that a team has enough time to plan, think and rest, to deliver a constant steady flow of value to the users.

<span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Sponsors should be able to move and keep a pace that's aligned with the teams, so that they can continue to help provide support, steer and feedback on the work as it gets 'done' by the development team. What about the users, where do they come into this? The obvious answer might be to say, that users should continue in adopting and using the software as it's released. To keep the organisation in business and to help shape the product. In an ideal world, the users should be giving feedback on the product increments as there are marked as done - it doesn’t get any better than that. If we released software frequently, but it took users months pick any of it up and actually use it, then the lag in getting their prolonged feedback wouldn't lend itself to be too useful to our sense and respond approach of delivering value - which essentially is what 'agile' is about. If users aren't using the software frequently, then there is that question 'Do they even find the software particularly useful at all?' - it's worth finding out!

'_Rule of thumb: Never space your releases out for longer than you can afford to absorb in wasted development time._'

# Conclusion
span style="color:#00000; text-align: justify; font-family: 'open sans'; text-align: 'justify'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Since software development is complex work, find the sweet spot that sits between full utilisation and slack, a point that allows flexibility and freedom within the team to be able to pick up and deal with unforeseen events and issues that can crop up during development. In the interest of team member’s well-being and the quality of their performance, development should move at a pace that makes sense for the team, organisation and the users. Closing the communication gap between an organisation and their customers seems to be a key aspect to the success and longevity of an organisation. It can certainly help an organisation understand their customers better, so they can discover useful and valuable solutions for together. Continuing to develop without this type of relationship won’t last. Not inspecting and adapting regularly, can end up costing a lot more than just the time and effort it took working on the design, test and build of the software. Now you’ll have the added burden of maintaining and the need to understand the additional complexity that has been introduced into the codebase. High percentage of features rarely get used or yield the expected ROI / business value – the success of software isn’t ascertained whether or not a development team get all their requirements delivered. It’s determined by the outcome and impact the software has once it's been released and put in the hands of users. It has to meet their needs and be valuable to them - market is the market, users are the users.

<span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Links below if you’re after more information on this subject, I’d recommend checking these out:

- <span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Sustainable Software Development: An Agile Perspective - by [Kevin Tate](https://www.amazon.co.uk/Sustainable-Software-Development-Agile-Perspective/dp/0321286081)
- <span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Tobias Mayer, untangler- [ Agile Development & Business Goals](https://www.amazon.co.uk/Agile-Development-Business-Goals-Solution/dp/0123815207)
- <span style="color:#00000; font-family: 'open sans'; font-size: 1em; font-size: 18px; font-weight: 200; hyphens: none;">Productive Conversations - [Agile Manifesto](https://agilemanifesto.org/principles.html)
